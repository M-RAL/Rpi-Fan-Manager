[
    {
        "id": "cb2db239f00d048c",
        "type": "tab",
        "label": "Sensors",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d3fe6ab0d5b7cb87",
        "type": "tab",
        "label": "Fan Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bbbc904fd5230ee1",
        "type": "tab",
        "label": "Alerts",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a721e3962d2d4614",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3e65df7980ad3827",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "334e8f82a2af04a5",
        "type": "ui_group",
        "name": "Default",
        "tab": "835d76dd3e95f5d7",
        "order": 1,
        "disp": false,
        "width": 21,
        "collapse": false,
        "className": ""
    },
    {
        "id": "12c7c5a9.cc3c3a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "0a637544c6b497cf",
        "type": "ui_group",
        "name": "Sensors",
        "tab": "36990d33f6c1c3fa",
        "order": 2,
        "disp": false,
        "width": 18,
        "collapse": false,
        "className": ""
    },
    {
        "id": "835d76dd3e95f5d7",
        "type": "ui_tab",
        "name": "Fan Control",
        "icon": "toys",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "36990d33f6c1c3fa",
        "type": "ui_tab",
        "name": "Sensors",
        "icon": "graphic_eq",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3599edad7310fb22",
        "type": "ui_group",
        "name": "Default",
        "tab": "12c7c5a9.cc3c3a",
        "order": 1,
        "disp": false,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "83cf6743b6454e61",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "776078fef2ccc07e",
        "type": "ui_tab",
        "name": "Alerts",
        "icon": "warning",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "18a61b33cd9ca162",
        "type": "ui_group",
        "name": "Default",
        "tab": "776078fef2ccc07e",
        "order": 1,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d9bbebea2c7d75c3",
        "type": "ui_spacer",
        "z": "bbbc904fd5230ee1",
        "name": "spacer",
        "group": "18a61b33cd9ca162",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "36e047f7a6d5e44c",
        "type": "ui_spacer",
        "z": "bbbc904fd5230ee1",
        "name": "spacer",
        "group": "18a61b33cd9ca162",
        "order": 10,
        "width": 4,
        "height": 1
    },
    {
        "id": "dbebe864d2139e33",
        "type": "ui_spacer",
        "z": "bbbc904fd5230ee1",
        "name": "spacer",
        "group": "18a61b33cd9ca162",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "57a0d93e95b0c590",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "settings",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bd65e8c49ef1d8ed",
        "type": "ui_group",
        "name": "Default",
        "tab": "57a0d93e95b0c590",
        "order": 1,
        "disp": false,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f5cd4627bf95806",
        "type": "ui_spacer",
        "z": "d3fe6ab0d5b7cb87",
        "name": "spacer",
        "group": "334e8f82a2af04a5",
        "order": 4,
        "width": 11,
        "height": 1
    },
    {
        "id": "01d975842dd26a6f",
        "type": "exec",
        "z": "cb2db239f00d048c",
        "command": "sudo python3 -m liquidctl list",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "List devices",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "3677e06686b99ddb"
            ],
            [],
            []
        ]
    },
    {
        "id": "09529318c9ce8439",
        "type": "exec",
        "z": "cb2db239f00d048c",
        "command": "sudo python3 -m liquidctl --match NZXT status",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Status",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "8fdd13787bff0313",
                "329fa906dc0bd372"
            ],
            [
                "f4f4c3e833870646"
            ],
            []
        ]
    },
    {
        "id": "f4f4c3e833870646",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 1",
        "func": "const status = msg.payload;\n\nif (status.includes(\"timed out\")){\n    msg.payload = \"Offline\";\n    msg.fcolor = \"red\";\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 360,
        "wires": [
            [
                "b5ed87b1f85af30e",
                "f8cde591aac4dc78"
            ]
        ]
    },
    {
        "id": "b5ed87b1f85af30e",
        "type": "ui_text",
        "z": "cb2db239f00d048c",
        "group": "3599edad7310fb22",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Status",
        "label": "",
        "format": "<font color={{fcolor}}>{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "3677e06686b99ddb",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 2",
        "func": "const string = msg.payload;\nvar lastString = global.get(\"lastListDevices\");\nif (string == lastString){\n    return;\n}\n\nglobal.set(\"lastListDevices\", string);\n\nvar lines = string.split(/\\n/);\nvar result = lines.map(function (line) {\n    var parts = line.split(': ');\n    if (parts.length > 1) {\n        return parts[1];\n    } else {\n        return \"\";\n    }\n});\n\n//var options = [\"asd\", \"#asd\"];\nvar filteredOptions = result.filter(function (value) {\n    return value.trim() !== \"\";\n});\n\nmsg.options = filteredOptions;\nmsg.payload = filteredOptions[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "deb8cc10d296a0dd"
            ]
        ]
    },
    {
        "id": "9c4b54b0eb020e14",
        "type": "ui_button",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "3599edad7310fb22",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Initialize",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 960,
        "y": 400,
        "wires": [
            [
                "64044bb4b74cc849"
            ]
        ]
    },
    {
        "id": "64044bb4b74cc849",
        "type": "exec",
        "z": "cb2db239f00d048c",
        "command": "sudo python3 -m liquidctl initialize all",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Initialize",
        "x": 1120,
        "y": 400,
        "wires": [
            [
                "c5e2c4c1bd14cc68"
            ],
            [],
            []
        ]
    },
    {
        "id": "288ae204680aab40",
        "type": "ui_toast",
        "z": "cb2db239f00d048c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Initialized",
        "name": "",
        "x": 1430,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c5e2c4c1bd14cc68",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 3",
        "func": "const status = msg.payload;\n\nif (status.includes(\"└\")){\n    msg.payload = status.replace(\"└\",'');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "288ae204680aab40"
            ]
        ]
    },
    {
        "id": "8fdd13787bff0313",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 4",
        "func": "if (msg.payload == \"\") return;\nvar lines = msg.payload.split('\\n');\n\n// Create an empty object to store the organized data\nvar data = {};\n\n// Iterate over each line\nfor (var i = 0; i < lines.length; i++) {\n    // Split the line into key and value\n    var parts = lines[i].split(/\\s{2,}/);\n\n    // Check if the line has at least two parts\n    if (parts.length >= 2) {\n        // Extract the key and value\n        var key = parts[0].replace(/[├└─]/g, '').trim();\n        var value = parts[1].trim();\n\n        // Store the key-value pair in the data object\n        data[key] = value;\n    }\n}\n\n// Set the organized data as the payload\nmsg.payload = data;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "0826027ef7f3b7fb",
                "8ee18c520c5b6d26"
            ]
        ]
    },
    {
        "id": "a68eb072e9ba118c",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "3599edad7310fb22",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Speed (RPM)",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2500",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1040,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0826027ef7f3b7fb",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 5",
        "func": "\nmsg.payload = [{\n    \"series\": [\"Fan 1 speed\", \"Fan 2 speed\", \"Fan 3 speed\"],\n    \"data\": [msg.payload[\"Fan 1 speed\"], msg.payload[\"Fan 2 speed\"], msg.payload[\"Fan 3 speed\"]],\n    \"labels\": [\"Fan 1 speed\", \"Fan 2 speed\", \"Fan 3 speed\"]\n}];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 280,
        "wires": [
            [
                "a68eb072e9ba118c"
            ]
        ]
    },
    {
        "id": "251644135ad55a0d",
        "type": "change",
        "z": "cb2db239f00d048c",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload[\"Fan 1 duty\"]",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "fde699f54944faf8",
        "type": "change",
        "z": "cb2db239f00d048c",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload[\"Fan 2 duty\"]",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "0e1039408e8eec3a",
        "type": "change",
        "z": "cb2db239f00d048c",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload[\"Fan 3 duty\"]",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "5066ef8ddb56db75",
        "type": "exec",
        "z": "cb2db239f00d048c",
        "command": "sudo python3 -m liquidctl --match NZXT status",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Status",
        "x": 730,
        "y": 480,
        "wires": [
            [
                "b8903d2124dab80b"
            ],
            [
                "d1222a39446537ba"
            ],
            [
                "d1222a39446537ba"
            ]
        ]
    },
    {
        "id": "b8903d2124dab80b",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 6",
        "func": "// Extract lines from the response\nvar lines = msg.payload.split('\\n');\n\n// Create an empty object to store the organized data\nvar data = {};\n\n// Iterate over each line\nfor (var i = 0; i < lines.length; i++) {\n    // Split the line into key and value\n    var parts = lines[i].split(/\\s{2,}/);\n\n    // Check if the line has at least two parts\n    if (parts.length >= 2) {\n        // Extract the key and value\n        var key = parts[0].replace(/[├└─]/g, '').trim();\n        var value = parts[1].trim();\n\n        // Store the key-value pair in the data object\n        data[key] = value;\n    }\n}\n\n// Set the organized data as the payload\nmsg.payload = data;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 480,
        "wires": [
            [
                "251644135ad55a0d",
                "fde699f54944faf8",
                "0e1039408e8eec3a"
            ]
        ]
    },
    {
        "id": "2ede7b9e66845fc8",
        "type": "ui_ui_control",
        "z": "cb2db239f00d048c",
        "name": "",
        "events": "all",
        "x": 80,
        "y": 260,
        "wires": [
            [
                "494329342922b39c",
                "0e8e3cd9ea0cf439"
            ]
        ]
    },
    {
        "id": "494329342922b39c",
        "type": "switch",
        "z": "cb2db239f00d048c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "change",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 480,
        "wires": [
            [
                "5066ef8ddb56db75",
                "504f62e90a0b188f"
            ]
        ]
    },
    {
        "id": "0e8e3cd9ea0cf439",
        "type": "trigger",
        "z": "cb2db239f00d048c",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "01d975842dd26a6f",
                "09529318c9ce8439",
                "f9c23d23.c8c24"
            ]
        ]
    },
    {
        "id": "deb8cc10d296a0dd",
        "type": "ui_dropdown",
        "z": "cb2db239f00d048c",
        "name": "Device",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "3599edad7310fb22",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 850,
        "y": 100,
        "wires": [
            [
                "68fa38c5f96ddfb9"
            ]
        ]
    },
    {
        "id": "504f62e90a0b188f",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 7",
        "func": "global.set(\"lastListDevices\", \"\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "8ee18c520c5b6d26",
        "type": "ui_template",
        "z": "cb2db239f00d048c",
        "group": "3599edad7310fb22",
        "name": "",
        "order": 4,
        "width": 7,
        "height": 6,
        "format": "<table style=\"margin-left: 15px\">\n    <tr>\n        <b style=\"margin-left: 8px\">Status</b>\n    </tr>\n    <tr ng-repeat=\"(key, value) in msg.payload\">\n        <td>{{ key }}</td>\n        <td>{{ value }}</td>\n    </tr>\n</table>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "329fa906dc0bd372",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 9",
        "func": "if (msg.payload == \"\") return;\n\nconst status = msg.payload;\n\nif (!status.includes(\"timed out\")){\n    msg.payload = \"Online\";\n    msg.fcolor = \"green\";\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "b5ed87b1f85af30e",
                "b3554e02058fc645"
            ]
        ]
    },
    {
        "id": "f8cde591aac4dc78",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 8",
        "func": "const status = msg.payload;\n\nif (status.includes(\"Offline\")){\n    msg.enabled = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 400,
        "wires": [
            [
                "9c4b54b0eb020e14"
            ]
        ]
    },
    {
        "id": "b3554e02058fc645",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 10",
        "func": "const status = msg.payload;\n\nif (status.includes(\"Online\")){\n    msg.enabled = false;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 360,
        "wires": [
            [
                "9c4b54b0eb020e14"
            ]
        ]
    },
    {
        "id": "f9c23d23.c8c24",
        "type": "exec",
        "z": "cb2db239f00d048c",
        "command": "vcgencmd measure_temp",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Raspberry CPU Temperature",
        "x": 540,
        "y": 760,
        "wires": [
            [
                "a0ad4644.0efbf8"
            ],
            [],
            []
        ]
    },
    {
        "id": "a0ad4644.0efbf8",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "Extract CPU Temp",
        "func": "const re = /^temp=(.*)'C$/gm;\nmsg.payload = Number(msg.payload.replace(re, '$1'));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 760,
        "wires": [
            [
                "9f73eba7475711fb"
            ]
        ]
    },
    {
        "id": "9f73eba7475711fb",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "Temp (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "80",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "318927c1a542d32e",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 2,
        "width": 18,
        "height": 4,
        "label": "Temp (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "80",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "bb9165e0587779f3",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 5,
        "width": 6,
        "height": 4,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1010,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "28cc62e6fb8ba822",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 6,
        "width": 6,
        "height": 4,
        "label": "Air Pressure(hPa)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "28bd129435c84504",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 7,
        "width": 6,
        "height": 4,
        "label": "Ambient VOC",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "300",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "ee5be31d31930689",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 9,
        "width": 6,
        "height": 4,
        "label": "UV",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "12",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 990,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e7f7fe8df7c59bcc",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 8,
        "width": 6,
        "height": 4,
        "label": " Ambient Light",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#888fc3",
            "#ff7f0e",
            "#31af31",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "d1222a39446537ba",
        "type": "debug",
        "z": "cb2db239f00d048c",
        "d": true,
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 540,
        "wires": []
    },
    {
        "id": "c7c98c5d883978ea",
        "type": "mqtt in",
        "z": "cb2db239f00d048c",
        "name": "",
        "topic": "sensors_data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "83cf6743b6454e61",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 840,
        "wires": [
            [
                "ab747dc9a7025e1a",
                "1d65c3238ecb0ba1",
                "eec4f9723c873ed9",
                "abcc5d8c9c3394dc",
                "214747e4ce4dd544",
                "2f86d3897368b57c",
                "218098943cac9c8f",
                "5614320cb9d36af9"
            ]
        ]
    },
    {
        "id": "ab747dc9a7025e1a",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 17",
        "func": "msg.payload = msg.payload.temp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 840,
        "wires": [
            [
                "318927c1a542d32e"
            ]
        ]
    },
    {
        "id": "1d65c3238ecb0ba1",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 18",
        "func": "msg.payload = msg.payload.hum;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 880,
        "wires": [
            [
                "bb9165e0587779f3"
            ]
        ]
    },
    {
        "id": "eec4f9723c873ed9",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 19",
        "func": "msg.payload = msg.payload.press;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 920,
        "wires": [
            [
                "28cc62e6fb8ba822"
            ]
        ]
    },
    {
        "id": "abcc5d8c9c3394dc",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 20",
        "func": "msg.payload = msg.payload.gas;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 960,
        "wires": [
            [
                "28bd129435c84504"
            ]
        ]
    },
    {
        "id": "214747e4ce4dd544",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 21",
        "func": "msg.payload = msg.payload.uv;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1000,
        "wires": [
            [
                "ee5be31d31930689"
            ]
        ]
    },
    {
        "id": "2f86d3897368b57c",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 22",
        "func": "msg.payload = msg.payload.lux;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1040,
        "wires": [
            [
                "e7f7fe8df7c59bcc"
            ]
        ]
    },
    {
        "id": "218098943cac9c8f",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 23",
        "func": "msg.payload = msg.payload.flame;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1120,
        "wires": [
            [
                "f89fb0ff0b416f5a"
            ]
        ]
    },
    {
        "id": "68fa38c5f96ddfb9",
        "type": "debug",
        "z": "cb2db239f00d048c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 100,
        "wires": []
    },
    {
        "id": "5614320cb9d36af9",
        "type": "function",
        "z": "cb2db239f00d048c",
        "name": "function 24",
        "func": "msg.payload = msg.payload.ozone;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1160,
        "wires": [
            [
                "be1c0a0c654e7f4d"
            ]
        ]
    },
    {
        "id": "be1c0a0c654e7f4d",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 11,
        "width": 9,
        "height": 4,
        "label": "Ozone Level (ppm)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "12",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#888fc3",
            "#ff7f0e",
            "#31af31",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "f89fb0ff0b416f5a",
        "type": "ui_chart",
        "z": "cb2db239f00d048c",
        "name": "",
        "group": "0a637544c6b497cf",
        "order": 12,
        "width": 9,
        "height": 4,
        "label": "Flame Sensor",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1.2",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#888fc3",
            "#ff7f0e",
            "#31af31",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "47fb8f11450fe66b",
        "type": "ui_text",
        "z": "cb2db239f00d048c",
        "group": "0a637544c6b497cf",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Module CPU",
        "label": "",
        "format": "Module CPU",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00afa0",
        "x": 1010,
        "y": 720,
        "wires": []
    },
    {
        "id": "a14e607b98d877d7",
        "type": "ui_text",
        "z": "cb2db239f00d048c",
        "group": "0a637544c6b497cf",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Module Hat",
        "label": "",
        "format": "Module Hat",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00afa0",
        "x": 1010,
        "y": 800,
        "wires": []
    },
    {
        "id": "c33febb617affdf5",
        "type": "ui_text",
        "z": "cb2db239f00d048c",
        "group": "0a637544c6b497cf",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "External Sensors",
        "label": "",
        "format": "External Sensors",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00afa0",
        "x": 1030,
        "y": 1080,
        "wires": []
    },
    {
        "id": "619b8e4ee0b9afa3",
        "type": "ui_template",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "name": "t1",
        "order": 9,
        "width": 7,
        "height": 7,
        "format": "<div\n  style=\"position: relative; width: 350px; height: 350px; border: 1px solid #008080; border-radius: 2%; overflow: hidden;left: 1%\">\n\n  <div\n    style=\"width: 100%; height: 25%; border: 1px solid #005151;position: absolute; top: 25%; left: 0%;margin-left:-1px\">\n  </div>\n  <div\n    style=\"width: 100%; height: 25%; border: 1px solid #005151;position: absolute; top: 75%; left: 0%;margin-left:-1px\">\n  </div>\n  \n  <div style=\"width: 25%; height: 100%; border: 1px solid #005151;position: absolute; top: 0%; left: 25%;margin-top:-1px\">\n  </div>\n  <div style=\"width: 25%; height: 100%; border: 1px solid #005151;position: absolute; top: 0%; left: 75%;margin-top:-1px\">\n  </div>\n  \n  <div style=\"position: absolute; width: 100%; top: 0%; left: 1%; font-size: 12px;\">\n    100%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 22%; left: 1%; font-size: 12px;\">\n    75%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 47%; left: 1%; font-size: 12px;\">\n    50%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 72%; left: 1%; font-size: 12px;\">\n    25%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 1%; font-size: 12px;\">\n    0%, 0°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 22%; font-size: 12px;\">\n    20°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 47%; font-size: 12px;\">\n    40°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 72%; font-size: 12px;\">\n    60°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 92%; font-size: 12px;\">\n    80°C\n  </div>\n\n\n  <svg style=\"position: absolute; width: 100%; height: 100%;\">\n    <line id=\"connector1_1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector1_2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector1_3\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector1_4\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector1_5\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n  </svg>\n\n  <div id=\"slider1_1\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider1_2\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider1_3\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider1_4\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n</div>\n\n<script>\n  (function(scope){\n  let sliders = [document.getElementById(\"slider1_1\"),\n    document.getElementById(\"slider1_2\"),\n    document.getElementById(\"slider1_3\"),\n    document.getElementById(\"slider1_4\")];\n    \n  let connectors = [document.getElementById(\"connector1_1\"),\n    document.getElementById(\"connector1_2\"),\n    document.getElementById(\"connector1_3\"),\n    document.getElementById(\"connector1_4\"),\n    document.getElementById(\"connector1_5\")];\n\n  var container = sliders[0].parentElement;\n  \n  // Define the limits\n  let minX = 0;\n  let minY = 0;\n  let maxX = container.clientWidth - sliders[0].clientWidth;\n  let maxY = container.clientHeight - sliders[0].clientHeight;\n  \n  let sliderX = [0.5,0.5,0.5,0.5];\n  let sliderY = [0.5,0.5,0.5,0.5];\n  scope.$watch('msg', function(msg) {\n    console.log(msg.payload);\n    if (Object.keys(msg.payload)[0] == 'fanSettings') {\n      const data = msg.payload;\n      sliderX = data.fanSettings.fan1.temp;\n      sliderY = data.fanSettings.fan1.speed;\n\n      for (let i = 0; i < 4; i++){\n        var initialX = (minX + maxX) * sliderX[i] / 80.0;\n        var initialY = (minY + maxY) * (1.0-(sliderY[i] / 100.0));\n        sliders[i].style.left = initialX + \"px\";\n        sliders[i].style.top = initialY + \"px\";\n      }\n      updateConnector();\n    }\n  });\n\n  let currentSlider = 0;\n\n  // Initial positions\n  for (let i = 0; i < 4; i++){\n    var initialX = (minX + maxX) * (i+1) / 5;\n    var initialY = (minY + maxY) / 2;\n    sliders[i].style.left = initialX + \"px\";\n    sliders[i].style.top = initialY + \"px\";\n\n    sliders[i].addEventListener(\"mousedown\", function (e) {\n      e.preventDefault();\n      currentSlider = i;\n      document.addEventListener(\"mousemove\", moveSlider);\n      document.addEventListener(\"mouseup\", releaseSlider);\n    });\n  }\n\n  function updateConnector() {\n    for(let i = 0; i < 3; i++){\n      var x1 = parseFloat(sliders[i].style.left) + sliders[i].clientWidth / 2;\n      var y1 = parseFloat(sliders[i].style.top) + sliders[i].clientHeight / 2;\n      var x2 = parseFloat(sliders[i+1].style.left) + sliders[i+1].clientWidth / 2;\n      var y2 = parseFloat(sliders[i+1].style.top) + sliders[i+1].clientHeight / 2;\n\n      connectors[i].setAttribute(\"x1\", x1);\n      connectors[i].setAttribute(\"y1\", y1);\n      connectors[i].setAttribute(\"x2\", x2);\n      connectors[i].setAttribute(\"y2\", y2);\n\n      if (i == 2){\n        let rect = container.getBoundingClientRect();\n        connectors[3].setAttribute(\"x1\", x2);\n        connectors[3].setAttribute(\"y1\", y2);\n        connectors[3].setAttribute(\"x2\", container.clientWidth);\n        connectors[3].setAttribute(\"y2\", y2);\n      }\n\n      if (i == 0){\n        let rect = container.getBoundingClientRect();\n        connectors[4].setAttribute(\"x1\", minX);\n        connectors[4].setAttribute(\"y1\", y1);\n        connectors[4].setAttribute(\"x2\", x1);\n        connectors[4].setAttribute(\"y2\", y1);\n      }\n    }\n  }\n    \n  function moveSlider(e) {\n    var rect = container.getBoundingClientRect();\n    var x = e.clientX - rect.left - sliders[currentSlider].clientWidth / 2;\n    var y = e.clientY - rect.top - sliders[currentSlider].clientHeight / 2;\n    \n    var maxX1, minX1;\n    if (currentSlider == 0){\n      maxX1 = parseFloat(sliders[currentSlider+1].style.left) - sliders[currentSlider].clientWidth;\n      minX1 = minX;\n    }else if (currentSlider == (sliders.length - 1)){\n      maxX1 = maxX;\n      minX1 = parseFloat(sliders[currentSlider-1].style.left) + sliders[currentSlider].clientWidth;\n    }else{\n      maxX1 = parseFloat(sliders[currentSlider+1].style.left) - sliders[currentSlider].clientWidth;\n      minX1 = parseFloat(sliders[currentSlider-1].style.left) + sliders[currentSlider].clientWidth;\n    }\n    \n    // Check and limit the slider's position within the boundaries\n    x = Math.max(minX1, Math.min(x, maxX1));\n    y = Math.max(minY, Math.min(y, maxY));\n    \n    sliders[currentSlider].style.left = x + \"px\";\n    sliders[currentSlider].style.top = y + \"px\";\n    \n    let x_val = (x - minX) / (maxX - minX) * 80.0;\n    let y_val = (1.0 - (y - minY) / (maxY - minY)) * 100.0;\n    sliderX[currentSlider] = x_val.toFixed(2);\n    sliderY[currentSlider] = y_val.toFixed(2);\n\n    updateConnector();\n  }\n  \n    \n  function releaseSlider() {\n    document.removeEventListener(\"mousemove\", moveSlider);\n    document.removeEventListener(\"mouseup\", releaseSlider);\n    send_payload();\n  }\n\n  function send_payload() {\n    var msg = { payload: {temp: sliderX, speed: sliderY}};\n    scope.send(msg);\n  }\n  updateConnector();\n\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "3948b220f4ed539c"
            ]
        ]
    },
    {
        "id": "bf62b6c17779a84c",
        "type": "ui_text",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "order": 6,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Fan 1 duty (%) / Temperature (°C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 580,
        "y": 220,
        "wires": []
    },
    {
        "id": "db6d419c56d2dcf7",
        "type": "ui_text",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "order": 7,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Fan 2 duty (%) / Temperature (°C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 580,
        "y": 320,
        "wires": []
    },
    {
        "id": "ab68d86ffeebd876",
        "type": "ui_text",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "order": 8,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Fan 3 duty (%) / Temperature (°C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 580,
        "y": 420,
        "wires": []
    },
    {
        "id": "8754bba72ec52fee",
        "type": "ui_template",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "name": "t2",
        "order": 10,
        "width": 7,
        "height": 7,
        "format": "<div\n  style=\"position: relative; width: 350px; height: 350px; border: 1px solid #008080; border-radius: 2%; overflow: hidden;left: 1%\">\n\n  <div\n    style=\"width: 100%; height: 25%; border: 1px solid #005151;position: absolute; top: 25%; left: 0%;margin-left:-1px\">\n  </div>\n  <div\n    style=\"width: 100%; height: 25%; border: 1px solid #005151;position: absolute; top: 75%; left: 0%;margin-left:-1px\">\n  </div>\n  \n  <div style=\"width: 25%; height: 100%; border: 1px solid #005151;position: absolute; top: 0%; left: 25%;margin-top:-1px\">\n  </div>\n  <div style=\"width: 25%; height: 100%; border: 1px solid #005151;position: absolute; top: 0%; left: 75%;margin-top:-1px\">\n  </div>\n  \n  <div style=\"position: absolute; width: 100%; top: 0%; left: 1%; font-size: 12px;\">\n    100%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 22%; left: 1%; font-size: 12px;\">\n    75%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 47%; left: 1%; font-size: 12px;\">\n    50%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 72%; left: 1%; font-size: 12px;\">\n    25%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 1%; font-size: 12px;\">\n    0%, 0°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 22%; font-size: 12px;\">\n    20°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 47%; font-size: 12px;\">\n    40°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 72%; font-size: 12px;\">\n    60°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 92%; font-size: 12px;\">\n    80°C\n  </div>\n\n\n  <svg style=\"position: absolute; width: 100%; height: 100%;\">\n    <line id=\"connector2_1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector2_2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector2_3\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector2_4\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector2_5\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n  </svg>\n\n  <div id=\"slider2_1\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider2_2\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider2_3\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider2_4\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n</div>\n\n<script>\n  (function(scope){\n  let sliders = [document.getElementById(\"slider2_1\"),\n    document.getElementById(\"slider2_2\"),\n    document.getElementById(\"slider2_3\"),\n    document.getElementById(\"slider2_4\")];\n    \n  let connectors = [document.getElementById(\"connector2_1\"),\n    document.getElementById(\"connector2_2\"),\n    document.getElementById(\"connector2_3\"),\n    document.getElementById(\"connector2_4\"),\n    document.getElementById(\"connector2_5\")];\n\n  let container = sliders[0].parentElement;\n  \n  // Define the limits\n  let minX = 0;\n  let minY = 0;\n  let maxX = container.clientWidth - sliders[0].clientWidth;\n  let maxY = container.clientHeight - sliders[0].clientHeight;\n  \n  let sliderX = [0.5,0.5,0.5,0.5];\n  let sliderY = [0.5,0.5,0.5,0.5];\n  scope.$watch('msg', function(msg) {\n    if (Object.keys(msg.payload)[0] == 'fanSettings') {\n      const data = msg.payload;\n      sliderX = data.fanSettings.fan2.temp;\n      sliderY = data.fanSettings.fan2.speed;\n\n      for (let i = 0; i < 4; i++){\n        var initialX = (minX + maxX) * sliderX[i] / 80.0;\n        var initialY = (minY + maxY) * (1.0-(sliderY[i] / 100.0));\n        sliders[i].style.left = initialX + \"px\";\n        sliders[i].style.top = initialY + \"px\";\n      }\n      updateConnector();\n    }    \n  });\n  let currentSlider = 0;\n\n  // Initial positions\n  for (let i = 0; i < 4; i++){\n    var initialX = (minX + maxX) * (i+1) / 5;\n    var initialY = (minY + maxY) / 2;\n    sliders[i].style.left = initialX + \"px\";\n    sliders[i].style.top = initialY + \"px\";\n\n    sliders[i].addEventListener(\"mousedown\", function (e) {\n      e.preventDefault();\n      currentSlider = i;\n      document.addEventListener(\"mousemove\", moveSlider);\n      document.addEventListener(\"mouseup\", releaseSlider);\n    });\n  }\n\n  function updateConnector() {\n    for(let i = 0; i < 3; i++){\n      var x1 = parseFloat(sliders[i].style.left) + sliders[i].clientWidth / 2;\n      var y1 = parseFloat(sliders[i].style.top) + sliders[i].clientHeight / 2;\n      var x2 = parseFloat(sliders[i+1].style.left) + sliders[i+1].clientWidth / 2;\n      var y2 = parseFloat(sliders[i+1].style.top) + sliders[i+1].clientHeight / 2;\n\n      connectors[i].setAttribute(\"x1\", x1);\n      connectors[i].setAttribute(\"y1\", y1);\n      connectors[i].setAttribute(\"x2\", x2);\n      connectors[i].setAttribute(\"y2\", y2);\n\n      if (i == 2){\n        let rect = container.getBoundingClientRect();\n        connectors[3].setAttribute(\"x1\", x2);\n        connectors[3].setAttribute(\"y1\", y2);\n        connectors[3].setAttribute(\"x2\", container.clientWidth);\n        connectors[3].setAttribute(\"y2\", y2);\n      }\n\n      if (i == 0){\n        let rect = container.getBoundingClientRect();\n        connectors[4].setAttribute(\"x1\", minX);\n        connectors[4].setAttribute(\"y1\", y1);\n        connectors[4].setAttribute(\"x2\", x1);\n        connectors[4].setAttribute(\"y2\", y1);\n      }\n    }\n  }\n    \n  function moveSlider(e) {\n    var rect = container.getBoundingClientRect();\n    var x = e.clientX - rect.left - sliders[currentSlider].clientWidth / 2;\n    var y = e.clientY - rect.top - sliders[currentSlider].clientHeight / 2;\n    \n    var maxX1, minX1;\n    if (currentSlider == 0){\n      maxX1 = parseFloat(sliders[currentSlider+1].style.left) - sliders[currentSlider].clientWidth;\n      minX1 = minX;\n    }else if (currentSlider == (sliders.length - 1)){\n      maxX1 = maxX;\n      minX1 = parseFloat(sliders[currentSlider-1].style.left) + sliders[currentSlider].clientWidth;\n    }else{\n      maxX1 = parseFloat(sliders[currentSlider+1].style.left) - sliders[currentSlider].clientWidth;\n      minX1 = parseFloat(sliders[currentSlider-1].style.left) + sliders[currentSlider].clientWidth;\n    }\n    \n    // Check and limit the slider's position within the boundaries\n    x = Math.max(minX1, Math.min(x, maxX1));\n    y = Math.max(minY, Math.min(y, maxY));\n    \n    sliders[currentSlider].style.left = x + \"px\";\n    sliders[currentSlider].style.top = y + \"px\";\n    \n    let x_val = (x - minX) / (maxX - minX) * 80.0;\n    let y_val = (1.0 - (y - minY) / (maxY - minY)) * 100.0;\n    sliderX[currentSlider] = x_val.toFixed(2);\n    sliderY[currentSlider] = y_val.toFixed(2);\n\n    updateConnector();\n  }\n  \n    \n  function releaseSlider() {\n    document.removeEventListener(\"mousemove\", moveSlider);\n    document.removeEventListener(\"mouseup\", releaseSlider);\n    send_payload();\n  }\n\n  function send_payload() {\n    var msg = { payload: {temp: sliderX, speed: sliderY}};\n    scope.send(msg);\n  }\n  updateConnector();\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 360,
        "wires": [
            [
                "8cf714fd6fef8dc5"
            ]
        ]
    },
    {
        "id": "bdf3f64ce3e85429",
        "type": "ui_template",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "name": "t3",
        "order": 11,
        "width": 7,
        "height": 7,
        "format": "<div\n  style=\"position: relative; width: 350px; height: 350px; border: 1px solid #008080; border-radius: 2%; overflow: hidden;left: 1%\">\n\n  <div\n    style=\"width: 100%; height: 25%; border: 1px solid #005151;position: absolute; top: 25%; left: 0%;margin-left:-1px\">\n  </div>\n  <div\n    style=\"width: 100%; height: 25%; border: 1px solid #005151;position: absolute; top: 75%; left: 0%;margin-left:-1px\">\n  </div>\n  \n  <div style=\"width: 25%; height: 100%; border: 1px solid #005151;position: absolute; top: 0%; left: 25%;margin-top:-1px\">\n  </div>\n  <div style=\"width: 25%; height: 100%; border: 1px solid #005151;position: absolute; top: 0%; left: 75%;margin-top:-1px\">\n  </div>\n  \n  <div style=\"position: absolute; width: 100%; top: 0%; left: 1%; font-size: 12px;\">\n    100%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 22%; left: 1%; font-size: 12px;\">\n    75%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 47%; left: 1%; font-size: 12px;\">\n    50%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 72%; left: 1%; font-size: 12px;\">\n    25%\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 1%; font-size: 12px;\">\n    0%, 0°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 22%; font-size: 12px;\">\n    20°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 47%; font-size: 12px;\">\n    40°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 72%; font-size: 12px;\">\n    60°C\n  </div>\n  <div style=\"position: absolute; width: 100%; top: 95%; left: 92%; font-size: 12px;\">\n    80°C\n  </div>\n\n\n  <svg style=\"position: absolute; width: 100%; height: 100%;\">\n    <line id=\"connector3_1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector3_2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector3_3\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector3_4\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n    <line id=\"connector3_5\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: #008080; stroke-width: 1;\" />\n  </svg>\n\n  <div id=\"slider3_1\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider3_2\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider3_3\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n  <div id=\"slider3_4\"\n    style=\"position: absolute; width: 15px; height: 15px; background-color: #008080; border-radius: 50%;\">\n  </div>\n</div>\n\n<script>\n  (function(scope){\n  let sliders = [document.getElementById(\"slider3_1\"),\n    document.getElementById(\"slider3_2\"),\n    document.getElementById(\"slider3_3\"),\n    document.getElementById(\"slider3_4\")];\n    \n  let connectors = [document.getElementById(\"connector3_1\"),\n    document.getElementById(\"connector3_2\"),\n    document.getElementById(\"connector3_3\"),\n    document.getElementById(\"connector3_4\"),\n    document.getElementById(\"connector3_5\")];\n\n  let container = sliders[0].parentElement;\n  \n  // Define the limits\n  let minX = 0;\n  let minY = 0;\n  let maxX = container.clientWidth - sliders[0].clientWidth;\n  let maxY = container.clientHeight - sliders[0].clientHeight;\n  \n  let sliderX = [0.5,0.5,0.5,0.5];\n  let sliderY = [0.5,0.5,0.5,0.5];\n  scope.$watch('msg', function(msg) {\n    if (Object.keys(msg.payload)[0] == 'fanSettings') {\n      const data = msg.payload;\n      sliderX = data.fanSettings.fan3.temp;\n      sliderY = data.fanSettings.fan3.speed;\n\n      for (let i = 0; i < 4; i++){\n        var initialX = (minX + maxX) * sliderX[i] / 80.0;\n        var initialY = (minY + maxY) * (1.0-(sliderY[i] / 100.0));\n        sliders[i].style.left = initialX + \"px\";\n        sliders[i].style.top = initialY + \"px\";\n      }\n      updateConnector();\n    }\n  });\n\n  // Initial positions\n  for (let i = 0; i < 4; i++){\n    var initialX = (minX + maxX) * (i+1) / 5;\n    var initialY = (minY + maxY) / 2;\n    sliders[i].style.left = initialX + \"px\";\n    sliders[i].style.top = initialY + \"px\";\n\n    sliders[i].addEventListener(\"mousedown\", function (e) {\n      e.preventDefault();\n      currentSlider = i;\n      document.addEventListener(\"mousemove\", moveSlider);\n      document.addEventListener(\"mouseup\", releaseSlider);\n    });\n  }\n\n  function updateConnector() {\n    for(let i = 0; i < 3; i++){\n      var x1 = parseFloat(sliders[i].style.left) + sliders[i].clientWidth / 2;\n      var y1 = parseFloat(sliders[i].style.top) + sliders[i].clientHeight / 2;\n      var x2 = parseFloat(sliders[i+1].style.left) + sliders[i+1].clientWidth / 2;\n      var y2 = parseFloat(sliders[i+1].style.top) + sliders[i+1].clientHeight / 2;\n\n      connectors[i].setAttribute(\"x1\", x1);\n      connectors[i].setAttribute(\"y1\", y1);\n      connectors[i].setAttribute(\"x2\", x2);\n      connectors[i].setAttribute(\"y2\", y2);\n\n      if (i == 2){\n        let rect = container.getBoundingClientRect();\n        connectors[3].setAttribute(\"x1\", x2);\n        connectors[3].setAttribute(\"y1\", y2);\n        connectors[3].setAttribute(\"x2\", container.clientWidth);\n        connectors[3].setAttribute(\"y2\", y2);\n      }\n\n      if (i == 0){\n        let rect = container.getBoundingClientRect();\n        connectors[4].setAttribute(\"x1\", minX);\n        connectors[4].setAttribute(\"y1\", y1);\n        connectors[4].setAttribute(\"x2\", x1);\n        connectors[4].setAttribute(\"y2\", y1);\n      }\n    }\n  }\n    \n  function moveSlider(e) {\n    var rect = container.getBoundingClientRect();\n    var x = e.clientX - rect.left - sliders[currentSlider].clientWidth / 2;\n    var y = e.clientY - rect.top - sliders[currentSlider].clientHeight / 2;\n    \n    var maxX1, minX1;\n    if (currentSlider == 0){\n      maxX1 = parseFloat(sliders[currentSlider+1].style.left) - sliders[currentSlider].clientWidth;\n      minX1 = minX;\n    }else if (currentSlider == (sliders.length - 1)){\n      maxX1 = maxX;\n      minX1 = parseFloat(sliders[currentSlider-1].style.left) + sliders[currentSlider].clientWidth;\n    }else{\n      maxX1 = parseFloat(sliders[currentSlider+1].style.left) - sliders[currentSlider].clientWidth;\n      minX1 = parseFloat(sliders[currentSlider-1].style.left) + sliders[currentSlider].clientWidth;\n    }\n    \n    // Check and limit the slider's position within the boundaries\n    x = Math.max(minX1, Math.min(x, maxX1));\n    y = Math.max(minY, Math.min(y, maxY));\n    \n    sliders[currentSlider].style.left = x + \"px\";\n    sliders[currentSlider].style.top = y + \"px\";\n    \n    let x_val = (x - minX) / (maxX - minX) * 80.0;\n    let y_val = (1.0 - (y - minY) / (maxY - minY)) * 100.0;\n    sliderX[currentSlider] = x_val.toFixed(2);\n    sliderY[currentSlider] = y_val.toFixed(2);\n\n    updateConnector();\n  }\n  \n    \n  function releaseSlider() {\n    document.removeEventListener(\"mousemove\", moveSlider);\n    document.removeEventListener(\"mouseup\", releaseSlider);\n    send_payload();\n  }\n\n  function send_payload() {\n    var msg = { payload: {temp: sliderX, speed: sliderY}};\n    scope.send(msg);\n  }\n  updateConnector();\n\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 460,
        "wires": [
            [
                "74fa277b372c751b"
            ]
        ]
    },
    {
        "id": "fbf1847d99e2b1f1",
        "type": "ui_button",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "group": "334e8f82a2af04a5",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Apply changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 680,
        "wires": [
            [
                "66def804304c84f0"
            ]
        ]
    },
    {
        "id": "8ca205a71a5d73b3",
        "type": "ui_template",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "name": "Import profile",
        "order": 2,
        "width": 3,
        "height": 1,
        "format": "<div><input type='file' name='importSetting' id='importSetting' style=\"display:none;\">\n    <label class=\"md-button md-raised md-primary\" for=\"importSetting\" id='importSetting' style=\"width: 140px; height: 40px;\">\n        <span style=\"position: relative; top: 11px;\">Import profile</span>\n      </label>\n</div>\n\n<script>\n\n(function(scope){\n\n    document.getElementById('importSetting').addEventListener('click', function(e) {\n        this.value = null;\n    });\n    document.getElementById('importSetting').addEventListener('change', function(e) {\n        e.preventDefault();\n        importJson();\n    });\n    function importJson() {\n        try{\n            const file = document.getElementById(\"importSetting\").files[0];\n            const reader = new FileReader();\n            reader.readAsText(file);\n            reader.onload = function() {\n                const jsonData = reader.result;\n                //JSON.parse(reader.result);\n                const msg = { payload: jsonData};\n                scope.send(msg);           \n            }\n        }\n        catch{\n            alert(\"Error importing profile\");\n        }\n    }\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 230,
        "y": 560,
        "wires": [
            [
                "a6faa52b58d06efd"
            ]
        ]
    },
    {
        "id": "3948b220f4ed539c",
        "type": "function",
        "z": "d3fe6ab0d5b7cb87",
        "name": "function 11",
        "func": "\nflow.set(\"fan1\", msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7c65d7454abf9c9d",
        "type": "ui_template",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "name": "save profile",
        "order": 3,
        "width": 3,
        "height": 1,
        "format": "<div>\n    <button id=\"customButton\" class=\"md-button md-raised md-primary\" ng-click=\"send({payload: 'true'})\" style=\"width: 140px; height: 40px;\">Export profile</button>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 230,
        "y": 620,
        "wires": [
            [
                "06c6e81597f576b7"
            ]
        ]
    },
    {
        "id": "06c6e81597f576b7",
        "type": "function",
        "z": "d3fe6ab0d5b7cb87",
        "name": "function 12",
        "func": "if (msg.payload == 'true'){\n    msg.button = \"true\";\n    msg.payload = { fan1: flow.get(\"fan1\"), fan2: flow.get(\"fan2\"), fan3: flow.get(\"fan3\")};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "b9c99d360d623ad5"
            ]
        ]
    },
    {
        "id": "b9c99d360d623ad5",
        "type": "ui_template",
        "z": "d3fe6ab0d5b7cb87",
        "group": "334e8f82a2af04a5",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function() {\n    \n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.button == 'true'){\n                scope.msg.button = \"false\";\n                const fanSettings = msg.payload;\n                const json = JSON.stringify({fanSettings}, null, 2);\n                const blob = new Blob([json], { type: \"application/json\" });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.download = \"FanControlProfile.json\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n\n            }\n        });\n    })(scope);\n})();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "69831bdd2f480ae5",
        "type": "file in",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "filename": "/home/pi/fancontrol.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "a6faa52b58d06efd"
            ]
        ]
    },
    {
        "id": "a6faa52b58d06efd",
        "type": "json",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 340,
        "wires": [
            [
                "619b8e4ee0b9afa3",
                "8754bba72ec52fee",
                "bdf3f64ce3e85429"
            ]
        ]
    },
    {
        "id": "6919e070dcca2e39",
        "type": "ui_ui_control",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "f4fa468ad62201fe"
            ]
        ]
    },
    {
        "id": "f4fa468ad62201fe",
        "type": "switch",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Fan Control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 60,
        "wires": [
            [
                "69831bdd2f480ae5"
            ]
        ]
    },
    {
        "id": "c279bb1fc3454f00",
        "type": "file",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "filename": "/home/pi/fancontrol.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "66def804304c84f0",
        "type": "function",
        "z": "d3fe6ab0d5b7cb87",
        "name": "function 13",
        "func": "const fan1 = flow.get(\"fan1\");\nconst fan2 = flow.get(\"fan2\");\nconst fan3 = flow.get(\"fan3\");\n\nconst fanSettings = {\n    fan1,\n    fan2,\n    fan3\n};\nmsg.payload = JSON.stringify({fanSettings}, null, 2);;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "c279bb1fc3454f00"
            ]
        ]
    },
    {
        "id": "8cf714fd6fef8dc5",
        "type": "function",
        "z": "d3fe6ab0d5b7cb87",
        "name": "function 14",
        "func": "\nflow.set(\"fan2\", msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "74fa277b372c751b",
        "type": "function",
        "z": "d3fe6ab0d5b7cb87",
        "name": "function 15",
        "func": "\nflow.set(\"fan3\", msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "9559b08796cbbcbd",
        "type": "function",
        "z": "d3fe6ab0d5b7cb87",
        "d": true,
        "name": "function 16",
        "func": "const data = msg.payload;\n\nlet sliderX_1 = data.fanSettings.fan1.temp;\nlet sliderY_1 = data.fanSettings.fan1.speed;\n\nlet data_out = { temp: sliderX_1, speed: sliderY_1};\n\nflow.set(\"fan1\", data_out);\n\nsliderX_1 = data.fanSettings.fan2.temp;\nsliderY_1 = data.fanSettings.fan2.speed;\n\ndata_out = { temp: sliderX_1, speed: sliderY_1 };\n\nflow.set(\"fan2\", data_out);\n\nsliderX_1 = data.fanSettings.fan3.temp;\nsliderY_1 = data.fanSettings.fan3.speed;\n\ndata_out = { temp: sliderX_1, speed: sliderY_1 };\n\nflow.set(\"fan3\", data_out);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "0dd08ba20b1923a3",
        "type": "delay",
        "z": "d3fe6ab0d5b7cb87",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1020,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c292ccc279a490a2",
        "type": "ui_button",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "group": "334e8f82a2af04a5",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Test Fan 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 810,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "71b9562cbfcf5e17",
        "type": "ui_numeric",
        "z": "d3fe6ab0d5b7cb87",
        "name": "Duration 1",
        "label": "Duration 1 (sec.)",
        "tooltip": "",
        "group": "334e8f82a2af04a5",
        "order": 13,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "60",
        "step": 1,
        "className": "",
        "x": 970,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "9f9391043942e3fd",
        "type": "ui_button",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "group": "334e8f82a2af04a5",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Test Fan 2",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 810,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f73eae060568fe59",
        "type": "ui_numeric",
        "z": "d3fe6ab0d5b7cb87",
        "name": "Duration 2",
        "label": "Duration (sec.)",
        "tooltip": "",
        "group": "334e8f82a2af04a5",
        "order": 15,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "60",
        "step": 1,
        "className": "",
        "x": 970,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "1292f3e070d037ce",
        "type": "ui_button",
        "z": "d3fe6ab0d5b7cb87",
        "name": "",
        "group": "334e8f82a2af04a5",
        "order": 16,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Test Fan 3",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 810,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e02cbbbdfe354612",
        "type": "ui_numeric",
        "z": "d3fe6ab0d5b7cb87",
        "name": "Duration 3",
        "label": "Duration (sec.)",
        "tooltip": "",
        "group": "334e8f82a2af04a5",
        "order": 17,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "60",
        "step": 1,
        "className": "",
        "x": 970,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5c084059bac4faf4",
        "type": "ui_numeric",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Min.",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 2,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 290,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "1fbd9180c8bc9c57",
        "type": "ui_numeric",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Max.",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 3,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 430,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "144fa158458a04fc",
        "type": "ui_text",
        "z": "bbbc904fd5230ee1",
        "group": "18a61b33cd9ca162",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Ozone (ppm)",
        "label": "",
        "format": "Ozone (ppm)",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00afa0",
        "x": 310,
        "y": 460,
        "wires": []
    },
    {
        "id": "52f6859f9a36999b",
        "type": "ui_numeric",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Max.",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 16,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 430,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "f38dfdca32e3c13d",
        "type": "ui_numeric",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Min.",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 15,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 290,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "c39a05c0702f8b46",
        "type": "ui_numeric",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Max.",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 9,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "6bdaaded7a990a74",
        "type": "ui_text",
        "z": "bbbc904fd5230ee1",
        "group": "18a61b33cd9ca162",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Temperature (°C)",
        "label": "",
        "format": "Temperature (°C)",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00afa0",
        "x": 330,
        "y": 180,
        "wires": []
    },
    {
        "id": "54fe3154a5b59548",
        "type": "ui_text",
        "z": "bbbc904fd5230ee1",
        "group": "18a61b33cd9ca162",
        "order": 14,
        "width": 0,
        "height": 0,
        "name": "Humidity (%)",
        "label": "",
        "format": "Humidity (%)",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00afa0",
        "x": 310,
        "y": 660,
        "wires": []
    },
    {
        "id": "51fb684c63dae421",
        "type": "ui_numeric",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "If lower than Min. Decrease fans duty (%)",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 7,
        "width": 7,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 400,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4c7ec1894492a4dd",
        "type": "ui_numeric",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Action: Increase fans duty (%)",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 13,
        "width": 7,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 530,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e2acd37cf8e3b96f",
        "type": "ui_text",
        "z": "bbbc904fd5230ee1",
        "group": "18a61b33cd9ca162",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Actions:",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#ffffff",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "d1eadd3dec8805c7",
        "type": "ui_switch",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Enable/Disable Actions",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 340,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f0086f0fadc13378",
        "type": "ui_text",
        "z": "bbbc904fd5230ee1",
        "group": "18a61b33cd9ca162",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Actions:",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#ffffff",
        "x": 300,
        "y": 540,
        "wires": []
    },
    {
        "id": "991680fa9e3fa2c5",
        "type": "ui_switch",
        "z": "bbbc904fd5230ee1",
        "name": "",
        "label": "Enable/Disable Actions",
        "tooltip": "",
        "group": "18a61b33cd9ca162",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 340,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d27a59be78c610f3",
        "type": "ui_text",
        "z": "a721e3962d2d4614",
        "group": "bd65e8c49ef1d8ed",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Winter Mode",
        "label": "",
        "format": "Winter Mode",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#00afa0",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "90d8bb2020f0161f",
        "type": "ui_switch",
        "z": "a721e3962d2d4614",
        "name": "",
        "label": "Enable/Disable",
        "tooltip": "",
        "group": "bd65e8c49ef1d8ed",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 120,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "4b6b33e3250b4d2f",
        "type": "ui_numeric",
        "z": "a721e3962d2d4614",
        "name": "",
        "label": "Duration of fans on (min.)",
        "tooltip": "",
        "group": "bd65e8c49ef1d8ed",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 150,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "72b5babe42a3122a",
        "type": "ui_numeric",
        "z": "a721e3962d2d4614",
        "name": "",
        "label": "Delay until next activation of fans (min.)",
        "tooltip": "",
        "group": "bd65e8c49ef1d8ed",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 200,
        "y": 220,
        "wires": [
            []
        ]
    }
]